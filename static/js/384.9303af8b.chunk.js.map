{"version":3,"file":"static/js/384.9303af8b.chunk.js","mappings":"2RACA,EAAgN,4BAAhN,EAAoP,yBAApP,EAAoR,wBAApR,EAAwT,6BAAxT,EAA6V,yBAA7V,EAA6X,wBAA7X,EAA8Z,0BAA9Z,EAAmc,4BAAnc,EAAse,wBAAte,EAAygB,4B,SCsHzgB,EA3GkB,SAAC,GAAe,IAAbA,EAAY,EAAZA,MACbC,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,WAAS,GAAjC,eAAOC,EAAP,KAAaC,EAAb,KAOMC,EAAmBC,EAAAA,GAAW,CAClCC,MAAOD,EAAAA,KAAaC,MAAM,yBAAyBC,SAAS,YAC5DC,SAAUH,EAAAA,KACPI,QAAQ,QAAS,6BACjBC,IAAI,EAAG,yBACPC,IAAI,GAAI,wBACRJ,SAAS,cASd,OACE,iBAAKK,UAAWC,EAAhB,WACE,eAAID,UAAWC,EAAf,SAA8Bf,KAC9B,SAAC,KAAD,CACEgB,cAxBgB,CACpBR,MAAO,GACPE,SAAU,IAuBNJ,iBAAkBA,EAClBW,SAZc,SAAAC,GAClB,IAAQV,EAAoBU,EAApBV,MAAOE,EAAaQ,EAAbR,SAEfT,EAASkB,EAAAA,GAAAA,MAAqB,CAAEX,MAAAA,EAAOE,SAAAA,IACxC,EAKG,SAQG,gBAAGU,EAAH,EAAGA,aAAH,OACC,UAAC,KAAD,CAAMN,UAAWC,EAAjB,WACE,iBAAKD,UAAWC,EAAhB,WACE,SAAC,KAAD,CACEM,KAAK,QACLC,KAAK,QACLR,UAAWC,EACXQ,YAAY,WAEd,SAAC,KAAD,CACED,KAAK,QACLE,OAAQ,SAAAC,GAAG,OAAI,gBAAKX,UAAWC,EAAhB,SAAkCU,GAAtC,QAGf,iBAAKX,UAAWC,EAAhB,WACE,SAAC,KAAD,CACEM,KAAMjB,EAAO,OAAS,WACtBkB,KAAK,WACLR,UAAWC,EACXQ,YAAY,cAEd,kBAAMT,UAAWC,EAAaW,QAAS,kBAAMrB,GAASD,EAAf,EAAvC,UACGA,IACC,SAAC,cAAD,CACEuB,MAAO,CAAEC,MAAO,CAAEC,cAAe,WADnC,UAGE,SAAC,MAAD,OAGFzB,IACA,SAAC,cAAD,CACEuB,MAAO,CAAEC,MAAO,CAAEC,cAAe,WADnC,UAGE,SAAC,MAAD,UAIN,SAAC,KAAD,CACEP,KAAK,WACLE,OAAQ,SAAAC,GAAG,OAAI,gBAAKX,UAAWC,EAAhB,SAAkCU,GAAtC,QAGf,4BACIL,IACA,mBAAQC,KAAK,SAASP,UAAWC,EAAjC,mBAIDK,IACC,SAAC,KAAD,CACEU,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,cACVC,aAAa,oBAKnB,eAAGpB,UAAWC,EAAd,wCAEE,SAAC,KAAD,CAAMD,UAAWC,EAAaoB,GAAG,YAAjC,2BA7DL,MAsER,E,UCzGD,EATkB,WAChB,OACE,4BACE,SAAC,EAAD,CAAWnC,MAAM,WACjB,SAACoC,EAAA,EAAD,MAGL,C","sources":["webpack://react-homework-template/./src/components/LoginForm/LoginForm.module.scss?1c6d","components/LoginForm/LoginForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"orangeColor\":\"#f59256\",\"mainTextColor\":\"#111\",\"backgroundColor\":\"#fdf7f2\",\"prymaryTextColor\":\"#000\",\"activeInputColor\":\"#fdf7f2\",\"errorColor\":\"#d60202\",\"secondaryTextColor\":\"#fff\",\"formWrap\":\"LoginForm_formWrap__GiixU\",\"title\":\"LoginForm_title__cvnUl\",\"form\":\"LoginForm_form__Kx5pU\",\"formGroup\":\"LoginForm_formGroup__kELnf\",\"input\":\"LoginForm_input__7Ngg7\",\"icon\":\"LoginForm_icon__i+0e7\",\"button\":\"LoginForm_button__ph0FE\",\"textHint\":\"LoginForm_textHint__LJohN\",\"link\":\"LoginForm_link__GY3qv\",\"errorMsg\":\"LoginForm_errorMsg__FEIHU\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport { IconContext } from 'react-icons';\nimport { FiEyeOff, FiEye } from 'react-icons/fi';\nimport { Dna } from 'react-loader-spinner';\n\nimport * as Yup from 'yup';\nimport { authOperations } from 'redux/auth';\nimport styles from './LoginForm.module.scss';\n\nconst LoginForm = ({ title }) => {\n  const dispatch = useDispatch();\n  const [show, setShow] = useState(false);\n\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n\n  const validationSchema = Yup.object({\n    email: Yup.string().email('Invalid email address').required('Required'),\n    password: Yup.string()\n      .matches(/^\\S*$/, 'Whitespace is not allowed')\n      .min(7, 'Password is too short')\n      .max(32, 'Password is too long')\n      .required('Required'),\n  });\n\n  const handleLogin = formValue => {\n    const { email, password } = formValue;\n\n    dispatch(authOperations.logIn({ email, password }));\n  };\n\n  return (\n    <div className={styles.formWrap}>\n      <h1 className={styles.title}>{title}</h1>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={handleLogin}\n        // onSubmit={(values, { setSubmitting }) => {\n        //   handleLogin(values, setSubmitting);\n        // }}\n      >\n        {({ isSubmitting }) => (\n          <Form className={styles.form}>\n            <div className={styles.formGroup}>\n              <Field\n                type=\"email\"\n                name=\"email\"\n                className={styles.input}\n                placeholder=\"Email\"\n              />\n              <ErrorMessage\n                name=\"email\"\n                render={msg => <div className={styles.errorMsg}>{msg}</div>}\n              />\n            </div>\n            <div className={styles.formGroup}>\n              <Field\n                type={show ? 'text' : 'password'}\n                name=\"password\"\n                className={styles.input}\n                placeholder=\"Password\"\n              />\n              <span className={styles.icon} onClick={() => setShow(!show)}>\n                {show && (\n                  <IconContext.Provider\n                    value={{ style: { verticalAlign: 'middle' } }}\n                  >\n                    <FiEye />\n                  </IconContext.Provider>\n                )}\n                {!show && (\n                  <IconContext.Provider\n                    value={{ style: { verticalAlign: 'middle' } }}\n                  >\n                    <FiEyeOff />\n                  </IconContext.Provider>\n                )}\n              </span>\n              <ErrorMessage\n                name=\"password\"\n                render={msg => <div className={styles.errorMsg}>{msg}</div>}\n              />\n            </div>\n            <div>\n              {!isSubmitting && (\n                <button type=\"submit\" className={styles.button}>\n                  Login\n                </button>\n              )}\n              {isSubmitting && (\n                <Dna\n                  visible={true}\n                  height=\"40\"\n                  width=\"80\"\n                  ariaLabel=\"dna-loading\"\n                  wrapperClass=\"dna-wrapper\"\n                />\n              )}\n            </div>\n\n            <p className={styles.textHint}>\n              Don't have an account?&nbsp;\n              <Link className={styles.link} to=\"/register\">\n                Register\n              </Link>\n            </p>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from 'components/LoginForm/LoginForm';\nimport AdaptiveImage from 'components/AdaptiveImage/AdaptiveImage';\n\nconst LoginPage = () => {\n  return (\n    <div>\n      <LoginForm title=\"Login\" />\n      <AdaptiveImage />\n    </div>\n  );\n};\n\nexport default LoginPage;\n"],"names":["title","dispatch","useDispatch","useState","show","setShow","validationSchema","Yup","email","required","password","matches","min","max","className","styles","initialValues","onSubmit","formValue","authOperations","isSubmitting","type","name","placeholder","render","msg","onClick","value","style","verticalAlign","visible","height","width","ariaLabel","wrapperClass","to","AdaptiveImage"],"sourceRoot":""}